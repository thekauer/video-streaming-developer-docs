"use strict";(self.webpackChunkexample=self.webpackChunkexample||[]).push([[9286],{55996:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return o},default:function(){return u}});var n=a(63366),r=(a(67294),a(64983)),i=a(55602),l=["components"],o={},p={_frontmatter:o},s=i.Z;function u(e){var t=e.components,a=(0,n.Z)(e,l);return(0,r.kt)(s,Object.assign({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",null,"Introduction"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"USPrebufferingController")," provides an API allowing the buffering of content ahead of time, to support near instantaneous playback starts.\nIf you provide a content list to be prepared for playback before it is actually required to be started, you will likely get a player prepared to start the playback instantly once it is actually needed by the user of your app."),(0,r.kt)("h2",null,"Usage"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a content list in priority order as soon as possible. For example, if the application contains a list of videos then the priority order may be determined based on the distance of the video cell from the screen centre. The list must contain ",(0,r.kt)("inlineCode",{parentName:"p"},"USMediaDescriptor")," objects.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Enqueue the content list for preparation using the ",(0,r.kt)("inlineCode",{parentName:"p"},"enqueueForPlaybackPreparation:")," method.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Update the list whenever it is needed by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"enqueueForPlaybackPreparation:")," with a new list. For example, when the user is scrolling up/down in the list.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Request a ",(0,r.kt)("inlineCode",{parentName:"p"},"USUstreamPlayer")," for a media using ",(0,r.kt)("inlineCode",{parentName:"p"},"playerForMedia:")," when the user is initiating a playback, eg. when a video is selected.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Present the requested player."))),(0,r.kt)("h2",null,"Notes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The content list can be updated freely anytime, it wonâ€™t trigger re-buffering on an existing player."),(0,r.kt)("li",{parentName:"ul"},"The provided player is owned by the caller, it may be used as any other player created with ",(0,r.kt)("inlineCode",{parentName:"li"},"[[USUstreamPlayer alloc] init]")," for example."),(0,r.kt)("li",{parentName:"ul"},"If the caller releases the player its resources will be reused for the other enqueued content."),(0,r.kt)("li",{parentName:"ul"},"If a content was not enqueued but a player is requested for it then the user will get a cold player which will start in buffering state, but it is a completely valid usage."),(0,r.kt)("li",{parentName:"ul"},"If it is appropriate, call ",(0,r.kt)("inlineCode",{parentName:"li"},"cancelPlaybackPreparations")," to release system resources."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"playerForMedia:")," is called multiple times with the same ",(0,r.kt)("inlineCode",{parentName:"li"},"USMediaDescriptor")," it will return the same player instance. You should create a different ",(0,r.kt)("inlineCode",{parentName:"li"},"USMediaDescriptor")," object for each occurrence in order to get different players for them.")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-player-sdk-ios-pre-buffering-mdx-1c472772ed9d78ebfccf.js.map