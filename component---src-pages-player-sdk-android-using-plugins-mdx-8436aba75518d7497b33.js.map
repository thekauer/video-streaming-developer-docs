{"version":3,"file":"component---src-pages-player-sdk-android-using-plugins-mdx-8436aba75518d7497b33.js","mappings":"yPAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,0PACmF,sBAAYC,WAAW,KAAvB,gEADnF,gEAEuD,sBAAYA,WAAW,KAAvB,mDAFvD,iKAG6F,sBAAYA,WAAW,KAAvB,kDAH7F,+CAIsC,sBAAYA,WAAW,KAAvB,cAJtC,MAKA,6UAEW,sBAAYA,WAAW,KAAvB,mBAFX,OAE6E,sBAAYA,WAAW,KAAvB,mBAF7E,sFAGU,sBAAYA,WAAW,KAAvB,qBAHV,4DAGmI,sBAAYA,WAAW,KAAvB,iCAHnI,sBAIA,sBAAYA,WAAW,KAAvB,qBAJA,oEAIiI,sBAAYA,WAAW,KAAvB,mBAJjI,uEAMA,8CAAgC,sBAAYA,WAAW,KAAvB,qBAAhC,sBAAmH,sBAAYA,WAAW,KAAvB,0BAAnH,qNAEQ,kBAAQA,WAAW,KAAnB,sBAFR,cAGA,iCACA,kBAAG,kBAAQA,WAAW,KAAnB,sBACH,kBAAG,cAAIA,WAAW,KAAf,4GAKPJ,EAAWK,gBAAiB","sources":["webpack://example/./src/pages/player-sdk-android/using-plugins.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`IBM Video Streaming Player SDK version 1.1.0 introduced a plugin system which enables you to extend the media player with additional features.\nPlugins will be provided by IBM and must be provided during player initialization in `}<inlineCode parentName=\"p\">{`Player.initWithContent(ContentDescriptor, MediaPlayerModule)`}</inlineCode>{`.\nThese extensions may require different player views than `}<inlineCode parentName=\"p\">{`com.ibm.video.android.player.android.PlayerView`}</inlineCode>{`. PlayerView requirements for a plugin will always be stated\nin this documentation but can also be queried from the MediaPlayerModule instance itself using `}<inlineCode parentName=\"p\">{`MediaPlayerModule.getSupportedPlayerViewType()`}</inlineCode>{`.\nMake sure to always use the appropriate `}<inlineCode parentName=\"p\">{`PlayerView`}</inlineCode>{`.`}</p>\n    <p>{`Creation of the plugin is the user’s responsibility, use the constructor of the desired plugin, provide appropriate parameters and set listeners.\nWhen a plugin is passed to a Player instance it will be retained across configuration changes, however the listeners the user provided are not subject\nto the usual `}<inlineCode parentName=\"p\">{`Player.attach()`}</inlineCode>{` / `}<inlineCode parentName=\"p\">{`Player.detach()`}</inlineCode>{` working. The user needs to manually set and remove those listeners.\nThe current `}<inlineCode parentName=\"p\">{`MediaPlayerModule`}</inlineCode>{` in use can be retrieved from the player instance using `}<inlineCode parentName=\"p\">{`Player.getMediaPlayerPlugin()`}</inlineCode>{` which returns\na `}<inlineCode parentName=\"p\">{`MediaPlayerModule`}</inlineCode>{` that will be cast to the appropriate class that was set during `}<inlineCode parentName=\"p\">{`initWithContent`}</inlineCode>{`. The user must know which MediaPlayerModule was\nset during init.`}</p>\n    <p>{`Please note that while a `}<inlineCode parentName=\"p\">{`MediaPlayerPlugin`}</inlineCode>{` provided through `}<inlineCode parentName=\"p\">{`Player.initWithContent`}</inlineCode>{` is retained across configuration changes,\nthe plugin itself might NOT support configuration changes at all due to plugin specific reasons. This will always be stated in the plugin’s documentation\nunder the `}<strong parentName=\"p\">{`Plugin limitations`}</strong>{` section.`}</p>\n    <h2>{`Ads Plugin`}</h2>\n    <p><strong parentName=\"p\">{`IMPORTANT NOTICE`}</strong></p>\n    <p><em parentName=\"p\">{`Ads plugin has been sunset and removed from the SDK. Support is no longer provided for this component.`}</em></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}