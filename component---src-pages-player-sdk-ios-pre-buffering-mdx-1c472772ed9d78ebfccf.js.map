{"version":3,"file":"component---src-pages-player-sdk-ios-pre-buffering-mdx-1c472772ed9d78ebfccf.js","mappings":"yPAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,mCACA,kBAAG,sBAAYC,WAAW,KAAvB,4BAAH,wVAEA,4BACA,mBACE,cAAIA,WAAW,OACb,aAAGA,WAAW,MAAd,2PAA8Q,sBAAYA,WAAW,KAAvB,qBAA9Q,eAEF,cAAIA,WAAW,OACb,aAAGA,WAAW,MAAd,uDAA0E,sBAAYA,WAAW,KAAvB,kCAA1E,cAEF,cAAIA,WAAW,OACb,aAAGA,WAAW,MAAd,qDAAwE,sBAAYA,WAAW,KAAvB,kCAAxE,oFAEF,cAAIA,WAAW,OACb,aAAGA,WAAW,MAAd,cAAiC,sBAAYA,WAAW,KAAvB,mBAAjC,uBAAmH,sBAAYA,WAAW,KAAvB,mBAAnH,4EAEF,cAAIA,WAAW,OACb,aAAGA,WAAW,MAAd,oCAGJ,4BACA,mBACE,cAAIA,WAAW,MAAf,yGACA,cAAIA,WAAW,MAAf,gGAAoH,sBAAYA,WAAW,MAAvB,kCAApH,kBACA,cAAIA,WAAW,MAAf,mGACA,cAAIA,WAAW,MAAf,iLACA,cAAIA,WAAW,MAAf,+BAAmD,sBAAYA,WAAW,MAAvB,8BAAnD,kCACA,cAAIA,WAAW,MAAf,OAA2B,sBAAYA,WAAW,MAAvB,mBAA3B,4CAAmI,sBAAYA,WAAW,MAAvB,qBAAnI,4EAA6Q,sBAAYA,WAAW,MAAvB,qBAA7Q,6EAMNJ,EAAWK,gBAAiB","sources":["webpack://example/./src/pages/player-sdk-ios/pre-buffering.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Introduction`}</h2>\n    <p><inlineCode parentName=\"p\">{`USPrebufferingController`}</inlineCode>{` provides an API allowing the buffering of content ahead of time, to support near instantaneous playback starts.\nIf you provide a content list to be prepared for playback before it is actually required to be started, you will likely get a player prepared to start the playback instantly once it is actually needed by the user of your app.`}</p>\n    <h2>{`Usage`}</h2>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Create a content list in priority order as soon as possible. For example, if the application contains a list of videos then the priority order may be determined based on the distance of the video cell from the screen centre. The list must contain `}<inlineCode parentName=\"p\">{`USMediaDescriptor`}</inlineCode>{` objects.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Enqueue the content list for preparation using the `}<inlineCode parentName=\"p\">{`enqueueForPlaybackPreparation:`}</inlineCode>{` method.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Update the list whenever it is needed by calling `}<inlineCode parentName=\"p\">{`enqueueForPlaybackPreparation:`}</inlineCode>{` with a new list. For example, when the user is scrolling up/down in the list.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Request a `}<inlineCode parentName=\"p\">{`USUstreamPlayer`}</inlineCode>{` for a media using `}<inlineCode parentName=\"p\">{`playerForMedia:`}</inlineCode>{` when the user is initiating a playback, eg. when a video is selected.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Present the requested player.`}</p>\n      </li>\n    </ol>\n    <h2>{`Notes`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`The content list can be updated freely anytime, it wonâ€™t trigger re-buffering on an existing player.`}</li>\n      <li parentName=\"ul\">{`The provided player is owned by the caller, it may be used as any other player created with `}<inlineCode parentName=\"li\">{`[[USUstreamPlayer alloc] init]`}</inlineCode>{` for example.`}</li>\n      <li parentName=\"ul\">{`If the caller releases the player its resources will be reused for the other enqueued content.`}</li>\n      <li parentName=\"ul\">{`If a content was not enqueued but a player is requested for it then the user will get a cold player which will start in buffering state, but it is a completely valid usage.`}</li>\n      <li parentName=\"ul\">{`If it is appropriate, call `}<inlineCode parentName=\"li\">{`cancelPlaybackPreparations`}</inlineCode>{` to release system resources.`}</li>\n      <li parentName=\"ul\">{`If `}<inlineCode parentName=\"li\">{`playerForMedia:`}</inlineCode>{` is called multiple times with the same `}<inlineCode parentName=\"li\">{`USMediaDescriptor`}</inlineCode>{` it will return the same player instance. You should create a different `}<inlineCode parentName=\"li\">{`USMediaDescriptor`}</inlineCode>{` object for each occurrence in order to get different players for them.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}