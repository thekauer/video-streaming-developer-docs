{"version":3,"file":"component---src-pages-player-sdk-cast-customization-mdx-d285bf626c516b47cd41.js","mappings":"4LAUsBA,E,6DAFTC,EAAe,GAOtBC,GALgBF,EAKmB,qBALX,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,cAASG,KAIZG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,QAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,8FAAgF,aAAGC,WAAW,IAC1F,KAAQ,2DADoE,yBAAhF,uKAIwD,sBAAYA,WAAW,KAAvB,gBAJxD,WAKA,QAACV,EAAD,CAAoBS,QAAQ,uBAC1B,4GACJ,cAAIC,WAAW,KAAf,yCAA4D,aAAGA,WAAW,KAChE,KAAQ,qEAD0C,QAA5D,QAIE,4CACA,uCACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,sPAWL,wCACA,kDAAoC,sBAAYA,WAAW,KAAvB,iBAApC,yBAAsH,sBAAYA,WAAW,KAAvB,iBAAtH,qDACA,oCACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,iBADZ,gKAOL,uCACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,gJAOL,2CACA,mDAAqC,sBAAYA,WAAW,KAAvB,UAArC,gCAAuH,sBAAYA,WAAW,KAAvB,oBAAvH,MACA,uCACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,2vBA0BL,qCACA,+GAAiG,sBAAYA,WAAW,KAAvB,UAAjG,gCAAmL,sBAAYA,WAAW,KAAvB,oBAAnL,MACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBADZ,kcAiBTH,EAAWI,gBAAiB","sources":["webpack://example/./src/pages/player-sdk-cast/customization.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`The sample app provided is a reference implementation of the Google Cast `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.google.com/cast/docs/styled_receiver\"\n      }}>{`Styled Media Receiver`}</a>{`.\nApply your brand colors, use your logo, or add your custom typeface by following the examples below.\nFeel free to delete or modify any of the variables in the `}<inlineCode parentName=\"p\">{`receiver.css`}</inlineCode>{` file.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`Our reference implementation does not include all the possible customization options.\n`}<em parentName=\"p\">{`Find the list of available variables `}<a parentName=\"em\" {...{\n            \"href\": \"https://developers.google.com/cast/docs/web_receiver/customize_ui\"\n          }}>{`here`}</a>{`.`}</em></p>\n    </InlineNotification>\n    <h3>{`Use your brand colors`}</h3>\n    <h4>{`css/receiver.css`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`cast-media-player {\n    /* Change background */\n    --background-color: #000;\n    /* Change hue used by the player */\n    --theme-hue: 220;\n    /* Change the color of the progress bar */\n    --progress-color: hsl(220, 100%, 50%);\n}\n`}</code></pre>\n    <h3>{`Use your own font`}</h3>\n    <p>{`Load your custom font in the `}<inlineCode parentName=\"p\">{`receiver.html`}</inlineCode>{` file and update the `}<inlineCode parentName=\"p\">{`--font-family`}</inlineCode>{` variable to get customized titles and metadata.`}</p>\n    <h4>{`receiver.html`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<html>\n    <head>\n        <!-- Load your own font -->\n        <link href=\"https://fonts.googleapis.com/css2?family=YOUR_FONT\" rel=\"stylesheet\">\n`}</code></pre>\n    <h4>{`css/receiver.css`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`cast-media-player {\n    /* Use your own font family and apply fallbacks */\n    --font-family: 'YOUR_FONT', 'Open Sans', sans-serif;\n}\n`}</code></pre>\n    <h3>{`Add your custom logo`}</h3>\n    <p>{`Add your own assets under the `}<inlineCode parentName=\"p\">{`static`}</inlineCode>{` folder and specify them in `}<inlineCode parentName=\"p\">{`css/receiver.css`}</inlineCode>{`.`}</p>\n    <h4>{`css/receiver.css`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`cast-media-player {\n    /* Spash image settings */\n    --splash-background: url('./static/images/wm.gif');\n    --splash-image: url('./static/images/wm.gif');\n    --splash-size: 200px;\n    --splash-repeat: no-repeat;\n    --splash-color: transparent;\n\n    /* Logo settings */\n    --logo-background: url('./static/images/wm.gif');\n    --logo-image: url('./static/images/wm.gif');\n    --logo-size: 200px;\n    --logo-repeat: no-repeat;\n    --logo-color: transparent;\n\n    /* Watermark settings */\n    --watermark-background: url('./static/svg/ibm.svg');\n    --watermark-image: url('./static/svg/ibm.svg');\n    --watermark-position: 0 0;\n    --watermark-size: 104px;\n    --watermark-repeat: no-repeat;\n    --watermark-color: transparent;\n}\n`}</code></pre>\n    <h3>{`Use your icons`}</h3>\n    <p>{`Similarly to the splash screen image and logo, you can change icons by adding them to the `}<inlineCode parentName=\"p\">{`static`}</inlineCode>{` folder and linking them in `}<inlineCode parentName=\"p\">{`css/receiver.css`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`cast-media-player {\n    /* The image to be displayed while paused. */\n    --pause-image: url('./static/svg/pause.svg');\n    /* The image to be displayed while playing */\n    --play-image: url('./static/svg/play.svg');\n    /* The image to be displayed while launching */\n    --spinner-image: url('./static/svg/loading.svg');\n    /* The image to be displayed while buffering */\n    --buffering-image: url('./static/svg/loading.svg');\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineNotification","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"sourceRoot":""}